// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: operations.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		operations.proto

	It has these top-level messages:
		Put
		Get
		Increment
		PutBatch
		GetBatch
		IncrementBatch
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Put struct {
	// should use constant value ??
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Col   []byte `protobuf:"bytes,2,opt,name=col,proto3" json:"col,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Epoch uint64 `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *Put) Reset()                    { *m = Put{} }
func (m *Put) String() string            { return proto1.CompactTextString(m) }
func (*Put) ProtoMessage()               {}
func (*Put) Descriptor() ([]byte, []int) { return fileDescriptorOperations, []int{0} }

func (m *Put) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Put) GetCol() []byte {
	if m != nil {
		return m.Col
	}
	return nil
}

func (m *Put) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Put) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type Get struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Col   []byte `protobuf:"bytes,2,opt,name=col,proto3" json:"col,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Epoch uint64 `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *Get) Reset()                    { *m = Get{} }
func (m *Get) String() string            { return proto1.CompactTextString(m) }
func (*Get) ProtoMessage()               {}
func (*Get) Descriptor() ([]byte, []int) { return fileDescriptorOperations, []int{1} }

func (m *Get) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Get) GetCol() []byte {
	if m != nil {
		return m.Col
	}
	return nil
}

func (m *Get) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Get) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type Increment struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Col   []byte `protobuf:"bytes,2,opt,name=col,proto3" json:"col,omitempty"`
	By    []byte `protobuf:"bytes,3,opt,name=by,proto3" json:"by,omitempty"`
	Epoch uint64 `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *Increment) Reset()                    { *m = Increment{} }
func (m *Increment) String() string            { return proto1.CompactTextString(m) }
func (*Increment) ProtoMessage()               {}
func (*Increment) Descriptor() ([]byte, []int) { return fileDescriptorOperations, []int{2} }

func (m *Increment) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Increment) GetCol() []byte {
	if m != nil {
		return m.Col
	}
	return nil
}

func (m *Increment) GetBy() []byte {
	if m != nil {
		return m.By
	}
	return nil
}

func (m *Increment) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type PutBatch struct {
	Puts []*Put `protobuf:"bytes,1,rep,name=puts" json:"puts,omitempty"`
}

func (m *PutBatch) Reset()                    { *m = PutBatch{} }
func (m *PutBatch) String() string            { return proto1.CompactTextString(m) }
func (*PutBatch) ProtoMessage()               {}
func (*PutBatch) Descriptor() ([]byte, []int) { return fileDescriptorOperations, []int{3} }

func (m *PutBatch) GetPuts() []*Put {
	if m != nil {
		return m.Puts
	}
	return nil
}

type GetBatch struct {
	Gets []*Get `protobuf:"bytes,1,rep,name=gets" json:"gets,omitempty"`
}

func (m *GetBatch) Reset()                    { *m = GetBatch{} }
func (m *GetBatch) String() string            { return proto1.CompactTextString(m) }
func (*GetBatch) ProtoMessage()               {}
func (*GetBatch) Descriptor() ([]byte, []int) { return fileDescriptorOperations, []int{4} }

func (m *GetBatch) GetGets() []*Get {
	if m != nil {
		return m.Gets
	}
	return nil
}

type IncrementBatch struct {
	Incrs []*Increment `protobuf:"bytes,1,rep,name=incrs" json:"incrs,omitempty"`
}

func (m *IncrementBatch) Reset()                    { *m = IncrementBatch{} }
func (m *IncrementBatch) String() string            { return proto1.CompactTextString(m) }
func (*IncrementBatch) ProtoMessage()               {}
func (*IncrementBatch) Descriptor() ([]byte, []int) { return fileDescriptorOperations, []int{5} }

func (m *IncrementBatch) GetIncrs() []*Increment {
	if m != nil {
		return m.Incrs
	}
	return nil
}

func init() {
	proto1.RegisterType((*Put)(nil), "proto.Put")
	proto1.RegisterType((*Get)(nil), "proto.Get")
	proto1.RegisterType((*Increment)(nil), "proto.Increment")
	proto1.RegisterType((*PutBatch)(nil), "proto.PutBatch")
	proto1.RegisterType((*GetBatch)(nil), "proto.GetBatch")
	proto1.RegisterType((*IncrementBatch)(nil), "proto.IncrementBatch")
}
func (m *Put) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Put) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Col) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Col)))
		i += copy(dAtA[i:], m.Col)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Epoch != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.Epoch))
	}
	return i, nil
}

func (m *Get) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Get) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Col) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Col)))
		i += copy(dAtA[i:], m.Col)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Epoch != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.Epoch))
	}
	return i, nil
}

func (m *Increment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Increment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Col) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Col)))
		i += copy(dAtA[i:], m.Col)
	}
	if len(m.By) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.By)))
		i += copy(dAtA[i:], m.By)
	}
	if m.Epoch != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.Epoch))
	}
	return i, nil
}

func (m *PutBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Puts) > 0 {
		for _, msg := range m.Puts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOperations(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gets) > 0 {
		for _, msg := range m.Gets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOperations(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IncrementBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncrementBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Incrs) > 0 {
		for _, msg := range m.Incrs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOperations(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintOperations(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Put) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	l = len(m.Col)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovOperations(uint64(m.Epoch))
	}
	return n
}

func (m *Get) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	l = len(m.Col)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovOperations(uint64(m.Epoch))
	}
	return n
}

func (m *Increment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	l = len(m.Col)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	l = len(m.By)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovOperations(uint64(m.Epoch))
	}
	return n
}

func (m *PutBatch) Size() (n int) {
	var l int
	_ = l
	if len(m.Puts) > 0 {
		for _, e := range m.Puts {
			l = e.Size()
			n += 1 + l + sovOperations(uint64(l))
		}
	}
	return n
}

func (m *GetBatch) Size() (n int) {
	var l int
	_ = l
	if len(m.Gets) > 0 {
		for _, e := range m.Gets {
			l = e.Size()
			n += 1 + l + sovOperations(uint64(l))
		}
	}
	return n
}

func (m *IncrementBatch) Size() (n int) {
	var l int
	_ = l
	if len(m.Incrs) > 0 {
		for _, e := range m.Incrs {
			l = e.Size()
			n += 1 + l + sovOperations(uint64(l))
		}
	}
	return n
}

func sovOperations(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOperations(x uint64) (n int) {
	return sovOperations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Put) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Put: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Put: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Col = append(m.Col[:0], dAtA[iNdEx:postIndex]...)
			if m.Col == nil {
				m.Col = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Get) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Get: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Get: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Col = append(m.Col[:0], dAtA[iNdEx:postIndex]...)
			if m.Col == nil {
				m.Col = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Increment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Increment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Increment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Col = append(m.Col[:0], dAtA[iNdEx:postIndex]...)
			if m.Col == nil {
				m.Col = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field By", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.By = append(m.By[:0], dAtA[iNdEx:postIndex]...)
			if m.By == nil {
				m.By = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Puts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Puts = append(m.Puts, &Put{})
			if err := m.Puts[len(m.Puts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gets = append(m.Gets, &Get{})
			if err := m.Gets[len(m.Gets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncrementBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncrementBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncrementBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Incrs = append(m.Incrs, &Increment{})
			if err := m.Incrs[len(m.Incrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOperations
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOperations
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOperations(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOperations = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperations   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("operations.proto", fileDescriptorOperations) }

var fileDescriptorOperations = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x90, 0x4f, 0x4a, 0xc4, 0x30,
	0x18, 0xc5, 0x4d, 0xff, 0x88, 0x7e, 0xca, 0x50, 0x8a, 0x8b, 0xe2, 0xa2, 0x94, 0x59, 0x48, 0x11,
	0xec, 0x80, 0x6e, 0x5c, 0xcf, 0xa6, 0xb8, 0x2b, 0x05, 0x0f, 0xd0, 0x84, 0xcf, 0xb6, 0xd8, 0xe9,
	0x57, 0x3a, 0x89, 0xd0, 0x5b, 0x78, 0x2c, 0x97, 0x1e, 0x41, 0xea, 0x45, 0x24, 0xc9, 0x38, 0x2e,
	0x44, 0x70, 0x33, 0xab, 0xbc, 0xf7, 0xcb, 0x7b, 0x8f, 0x10, 0x08, 0x68, 0xc0, 0xb1, 0x92, 0x2d,
	0xf5, 0xdb, 0x6c, 0x18, 0x49, 0x52, 0xe8, 0x9b, 0xe3, 0xf2, 0xa6, 0x6e, 0x65, 0xa3, 0x78, 0x26,
	0x68, 0xb3, 0xaa, 0xa9, 0xa6, 0x95, 0xc1, 0x5c, 0x3d, 0x19, 0x67, 0x8c, 0x51, 0xb6, 0xb5, 0x7c,
	0x04, 0xb7, 0x50, 0x32, 0x0c, 0xc0, 0x7d, 0xc6, 0x29, 0x62, 0x09, 0x4b, 0xcf, 0x4b, 0x2d, 0x35,
	0x11, 0xd4, 0x45, 0x8e, 0x25, 0x82, 0xba, 0xf0, 0x02, 0xfc, 0x97, 0xaa, 0x53, 0x18, 0xb9, 0x86,
	0x59, 0xa3, 0x29, 0x0e, 0x24, 0x9a, 0xc8, 0x4b, 0x58, 0xea, 0x95, 0xd6, 0xe8, 0xd9, 0x1c, 0x0f,
	0x31, 0x7b, 0xfa, 0xd0, 0x8b, 0x11, 0x37, 0xd8, 0xff, 0x6f, 0x7c, 0x01, 0x0e, 0x9f, 0x76, 0xcb,
	0x0e, 0x9f, 0xfe, 0x98, 0xbd, 0x86, 0x93, 0x42, 0xc9, 0x75, 0x25, 0x45, 0x13, 0xc6, 0xe0, 0x0d,
	0x4a, 0x6e, 0x23, 0x96, 0xb8, 0xe9, 0xd9, 0x2d, 0xd8, 0x6f, 0xca, 0x0a, 0x25, 0x4b, 0xc3, 0x75,
	0x36, 0xc7, 0x9f, 0x6c, 0x8d, 0xbf, 0xb2, 0x39, 0xca, 0xd2, 0xf0, 0xe5, 0x3d, 0x2c, 0xf6, 0xcf,
	0xb5, 0x8d, 0x2b, 0xf0, 0xdb, 0x5e, 0x8c, 0xdf, 0x95, 0x60, 0x57, 0xd9, 0xa7, 0x4a, 0x7b, 0xbd,
	0x0e, 0xde, 0xe6, 0x98, 0xbd, 0xcf, 0x31, 0xfb, 0x98, 0x63, 0xf6, 0xfa, 0x19, 0x1f, 0xf1, 0x63,
	0x93, 0xbc, 0xfb, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xc1, 0x9a, 0x61, 0xf9, 0x01, 0x00, 0x00,
}
